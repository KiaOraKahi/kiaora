generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String     @id @default(cuid())
  name             String?
  email            String     @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  role             Role       @default(FAN)
  isVerified       Boolean    @default(true)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  accounts         Account[]
  bookings         Booking[]
  celebrityProfile Celebrity?
  orders           Order[]
  reviews          Review[]
  sessions         Session[]
  tips             Tip[]
}

model Celebrity {
  id                       String              @id @default(cuid())
  userId                   String              @unique
  bio                      String?
  category                 String?
  price                    Float?
  isActive                 Boolean             @default(true)
  rating                   Float?              @default(4.5)
  totalReviews             Int                 @default(0)
  createdAt                DateTime            @default(now())
  updatedAt                DateTime            @updatedAt
  achievements             String[]            @default([])
  averageRating            Float?              @default(4.5)
  completionRate           Int                 @default(95)
  coverImage               String?
  featured                 Boolean             @default(false)
  longBio                  String?
  nextAvailable            String?             @default("2024-01-15")
  responseTime             String              @default("24 hours")
  tags                     String[]            @default([])
  verified                 Boolean             @default(false)
  bankCountry              String?
  lastPayoutAt             DateTime?
  payoutSchedule           PayoutSchedule      @default(WEEKLY)
  pendingEarnings          Float               @default(0)
  preferredCurrency        String              @default("nzd")
  stripeAccountStatus      StripeAccountStatus @default(PENDING)
  stripeChargesEnabled     Boolean             @default(false)
  stripeConnectAccountId   String?             @unique
  stripeOnboardingComplete Boolean             @default(false)
  stripePayoutsEnabled     Boolean             @default(false)
  totalEarnings            Float               @default(0)
  totalTips                Float               @default(0)
  bookings                 Booking[]
  user                     User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders                   Order[]
  payouts                  Payout[]
  reviews                  Review[]
  sampleVideos             SampleVideo[]
  tipsReceived             Tip[]
  transfers                Transfer[]
}

model SampleVideo {
  id          String    @id @default(cuid())
  celebrityId String
  title       String
  thumbnail   String?
  duration    String
  videoUrl    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  celebrity   Celebrity @relation(fields: [celebrityId], references: [id], onDelete: Cascade)
}

model CelebrityApplication {
  id                      String            @id @default(cuid())
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  fullName                String
  email                   String            @unique
  phone                   String
  dateOfBirth             String
  nationality             String?
  category                String
  experience              String
  instagramHandle         String?
  twitterHandle           String?
  tiktokHandle            String?
  youtubeHandle           String?
  otherSocialMedia        String?
  languages               String[]
  specialRequests         String?
  hasProfilePhoto         Boolean           @default(false)
  hasIdDocument           Boolean           @default(false)
  hasVerificationDocument Boolean           @default(false)
  profilePhotoUrl         String?
  idDocumentUrl           String?
  verificationDocumentUrl String?
  status                  ApplicationStatus @default(PENDING)
  reviewNotes             String?
  reviewedAt              DateTime?
  reviewedBy              String?

  @@map("celebrity_applications")
}

model Order {
  id                  String         @id @default(cuid())
  orderNumber         String         @unique
  userId              String
  celebrityId         String
  status              OrderStatus    @default(PENDING)
  totalAmount         Float
  currency            String         @default("nzd")
  paymentIntentId     String?        @unique
  paymentStatus       PaymentStatus  @default(PENDING)
  paidAt              DateTime?
  recipientName       String
  occasion            String
  personalMessage     String
  specialInstructions String?
  messageType         String
  email               String
  phone               String?
  scheduledDate       DateTime?
  scheduledTime       String?
  deliveredAt         DateTime?
  videoUrl            String?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  celebrityAmount     Float?
  platformFee         Float?
  platformFeeTransferred Boolean @default(false)
  transferId          String?
  transferStatus      TransferStatus @default(PENDING)
  transferredAt       DateTime?
  payoutStatus        TransferStatus @default(PENDING)
  approvalStatus      ApprovalStatus @default(PENDING_APPROVAL)
  approvedAt          DateTime?
  declineReason       String?
  declinedAt          DateTime?
  maxRevisions        Int            @default(2)
  revisionCount       Int            @default(0)
  booking             Booking?
  celebrity           Celebrity      @relation(fields: [celebrityId], references: [id], onDelete: Cascade)
  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items               OrderItem[]
  payouts             Payout[]
  tips                Tip[]
  transfers           Transfer[]
}

model OrderItem {
  id          String  @id @default(cuid())
  orderId     String
  type        String
  name        String
  description String?
  quantity    Int     @default(1)
  unitPrice   Float
  totalPrice  Float
  metadata    Json?
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Booking {
  id                  String        @id @default(cuid())
  celebrityId         String
  message             String
  occasion            String?
  status              BookingStatus @default(PENDING)
  price               Float
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  userId              String
  orderId             String        @unique
  deadline            DateTime?
  instructions        String?
  orderNumber         String        @unique
  recipientName       String
  scheduledDate       DateTime?
  specialInstructions String?
  totalAmount         Float
  celebrity           Celebrity     @relation(fields: [celebrityId], references: [id], onDelete: Cascade)
  order               Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user                User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviews             Review[]
}

model Review {
  id          String    @id @default(cuid())
  bookingId   String?
  celebrityId String
  rating      Int
  comment     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  occasion    String?
  verified    Boolean   @default(false)
  booking     Booking?  @relation(fields: [bookingId], references: [id])
  celebrity   Celebrity @relation(fields: [celebrityId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Tip {
  id              String         @id @default(cuid())
  orderId         String
  userId          String
  celebrityId     String
  amount          Float
  currency        String         @default("nzd")
  message         String?
  paymentIntentId String?        @unique
  paymentStatus   PaymentStatus  @default(PENDING)
  paidAt          DateTime?
  transferId      String?
  transferStatus  TransferStatus @default(PENDING)
  transferredAt   DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  celebrity       Celebrity      @relation(fields: [celebrityId], references: [id], onDelete: Cascade)
  order           Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  transfers       Transfer[]
}

model Transfer {
  id               String         @id @default(cuid())
  stripeTransferId String         @unique
  celebrityId      String
  orderId          String?
  tipId            String?
  amount           Float
  currency         String         @default("nzd")
  type             TransferType
  status           TransferStatus @default(PENDING)
  description      String?
  failureReason    String?
  initiatedAt      DateTime       @default(now())
  completedAt      DateTime?
  failedAt         DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  celebrity        Celebrity      @relation(fields: [celebrityId], references: [id], onDelete: Cascade)
  order            Order?         @relation(fields: [orderId], references: [id])
  tip              Tip?           @relation(fields: [tipId], references: [id])
}

model Payout {
  id               String         @id @default(cuid())
  celebrityId      String
  orderId          String
  amount           Float
  platformFee      Float
  currency         String         @default("nzd")
  stripeTransferId String?
  status           TransferStatus @default(PENDING)
  paidAt           DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  celebrity        Celebrity      @relation(fields: [celebrityId], references: [id], onDelete: Cascade)
  order            Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Service {
  id               String           @id @default(cuid())
  title            String
  shortDescription String
  fullDescription  String
  icon             String
  color            String
  startingPrice    Float
  asapPrice        Float
  duration         String
  deliveryTime     String
  asapDeliveryTime String
  popular          Boolean          @default(false)
  isActive         Boolean          @default(true)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  updatedBy        String?
  createdBy        String?
  order            Int              @default(0)
  currency         String           @default("nzd")
  numericId        Int              @unique @default(autoincrement())
  samples          Json             @default("[]")
  talents          Json             @default("[]")
  features         ServiceFeature[]

  @@map("services")
}

model ServiceFeature {
  id        String   @id @default(cuid())
  serviceId String
  text      String
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  service   Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@map("service_features")
}

model SiteContent {
  id          String      @id @default(cuid())
  key         String      @unique
  value       String
  type        ContentType @default(TEXT)
  category    String
  description String?
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  updatedBy   String?

  @@map("site_content")
}



model SiteSettings {
  id              String   @id @default(cuid())
  siteName        String   @default("Kia Ora Kahi")
  siteDescription String   @default("Connect with celebrities for personalized video messages")
  contactEmail    String   @default("admin@kiaora.com")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model FinancialSettings {
  id             String   @id @default(cuid())
  platformFee    Float    @default(20)
  minimumPayout  Float    @default(50)
  payoutSchedule String   @default("weekly")
  // Admin Stripe Account for Platform Fees
  adminStripeAccountId String?
  adminStripeAccountStatus String @default("PENDING")
  adminStripeAccountEmail String?
  adminStripeAccountName String?
  // Platform Fee Balance
  platformFeeBalance Float @default(0)
  lastPlatformFeePayout DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model SupportTicket {
  id           String                  @id @default(cuid())
  ticketNumber String                  @unique
  name         String
  email        String
  phone        String?
  category     String                  @default("general")
  subject      String
  message      String
  priority     String                  @default("normal")
  status       String                  @default("OPEN")
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
  responses    SupportTicketResponse[]
}

model SupportTicketResponse {
  id            String        @id @default(cuid())
  ticketId      String
  message       String
  isFromSupport Boolean       @default(false)
  createdAt     DateTime      @default(now())
  ticket        SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
}

model PlatformFeeTransfer {
  id            String   @id @default(cuid())
  amount        Float
  currency      String   @default("nzd")
  stripeTransferId String?
  status        String   @default("PENDING") // PENDING, SUCCEEDED, FAILED
  description   String?
  metadata      Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum Role {
  FAN
  CELEBRITY
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  REFUNDED
  PENDING_APPROVAL
  REVISION_REQUESTED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  CANCELLED
  REFUNDED
}

enum BookingStatus {
  PENDING
  ACCEPTED
  COMPLETED
  CANCELLED
  REFUNDED
  CONFIRMED
}

enum ApprovalStatus {
  PENDING_APPROVAL
  APPROVED
  DECLINED
  REVISION_REQUESTED
}



enum ApplicationStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  REQUIRES_CHANGES
}

enum StripeAccountStatus {
  PENDING
  RESTRICTED
  ACTIVE
  REJECTED
}

enum PayoutSchedule {
  DAILY
  WEEKLY
  MONTHLY
}

enum TransferStatus {
  PENDING
  IN_TRANSIT
  PAID
  FAILED
  CANCELLED
}

enum TransferType {
  BOOKING_PAYMENT
  TIP
}

enum ContentType {
  TEXT
  HTML
  JSON
  IMAGE
  NUMBER
  BOOLEAN
}

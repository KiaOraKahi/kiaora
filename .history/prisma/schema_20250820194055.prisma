generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(FAN)
  isVerified    Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]

  // Celebrity specific fields
  celebrityProfile Celebrity?

  // Fan specific fields
  bookings Booking[]
  reviews  Review[]
  orders   Order[]
  tips     Tip[]
}

model Celebrity {
  id           String   @id @default(cuid())
  userId       String   @unique
  bio          String?
  longBio      String?  @db.Text
  category     String?

  // Pricing fields - REMOVED service-specific pricing, kept legacy field
  price            Float?  // Legacy field, keep for compatibility

  // Rating and performance
  rating           Float?   @default(4.5)
  averageRating    Float?   @default(4.5)
  totalReviews     Int      @default(0)
  completionRate   Int      @default(95)
  responseTime     String   @default("24 hours")

  // Status and features
  isActive         Boolean  @default(true)
  verified         Boolean  @default(false)
  featured         Boolean  @default(false)

  // Additional profile fields
  coverImage       String?
  tags             String[] @default([])
  achievements     String[] @default([])
  nextAvailable    String?  @default("2024-01-15")

  // Stripe Connect Integration
  stripeConnectAccountId    String?  @unique
  stripeAccountStatus       StripeAccountStatus @default(PENDING)
  stripeOnboardingComplete  Boolean  @default(false)
  stripeChargesEnabled      Boolean  @default(false)
  stripePayoutsEnabled      Boolean  @default(false)
  preferredCurrency         String   @default("nzd")
  bankCountry              String?
  payoutSchedule           PayoutSchedule @default(WEEKLY)

  // Earnings tracking
  totalEarnings            Float    @default(0)
  totalTips               Float    @default(0)
  pendingEarnings         Float    @default(0)
  lastPayoutAt            DateTime?

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookings     Booking[]
  reviews      Review[]
  orders       Order[]
  sampleVideos SampleVideo[]
  transfers    Transfer[]
  tipsReceived Tip[]
  payouts      Payout[]
}

model SampleVideo {
  id          String @id @default(cuid())
  celebrityId String
  title       String
  thumbnail   String?
  duration    String
  videoUrl    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  celebrity Celebrity @relation(fields: [celebrityId], references: [id], onDelete: Cascade)
}

model CelebrityApplication {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Personal Information
  fullName     String
  email        String    @unique
  phone        String
  dateOfBirth  String
  nationality  String?   // Made optional

  // Professional Information - REMOVED profession field
  category     String
  experience   String    @db.Text  // Renamed from experience, now represents "Tell us about yourself"

  // Social Media
  instagramHandle   String?
  twitterHandle     String?
  tiktokHandle      String?
  youtubeHandle     String?
  otherSocialMedia  String?

  // Additional Info - REMOVED followerCount, basePrice, rushPrice, availability, motivation
  languages        String[]
  specialRequests  String?   @db.Text

  // Documents
  hasProfilePhoto          Boolean @default(false)
  hasIdDocument           Boolean @default(false)
  hasVerificationDocument Boolean @default(false)  // Already optional
  profilePhotoUrl         String?
  idDocumentUrl          String?
  verificationDocumentUrl String?  // Already optional

  // Application Status
  status        ApplicationStatus @default(PENDING)
  reviewNotes   String?          @db.Text
  reviewedAt    DateTime?
  reviewedBy    String?

  @@map("celebrity_applications")
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  userId          String
  celebrityId     String
  status          OrderStatus @default(PENDING)
  totalAmount     Float
  currency        String      @default("nzd")

  // Payment Information - Make this unique for webhook lookups
  paymentIntentId String?     @unique
  paymentStatus   PaymentStatus @default(PENDING)
  paidAt          DateTime?

  // Platform fee tracking (20% of totalAmount)
  platformFee     Float?
  celebrityAmount Float?      // 80% of totalAmount

  // Transfer tracking
  transferId      String?     // Stripe transfer ID
  transferStatus  TransferStatus @default(PENDING)
  transferredAt   DateTime?

  // Payout tracking - NEW FIELD
  payoutStatus    TransferStatus @default(PENDING)

  // Video Approval System - NEW FIELDS
  approvalStatus  ApprovalStatus @default(PENDING_APPROVAL)
  approvedAt      DateTime?
  declinedAt      DateTime?
  declineReason   String?      @db.Text
  revisionCount   Int          @default(0)
  maxRevisions    Int          @default(2)

  // Booking Details
  recipientName       String
  occasion           String
  personalMessage    String    @db.Text
  specialInstructions String?  @db.Text
  messageType        String    // personal, business, charity

  // Contact Information
  email              String
  phone              String?

  // Scheduling
  scheduledDate      DateTime?
  scheduledTime      String?

  // Delivery
  deliveredAt        DateTime?
  videoUrl           String?

  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  celebrity Celebrity  @relation(fields: [celebrityId], references: [id], onDelete: Cascade)
  items     OrderItem[]
  booking   Booking?    // IMPORTANT: Every order should have a corresponding booking record
  tips      Tip[]
  transfers Transfer[]
  payouts   Payout[]
}

model OrderItem {
  id          String  @id @default(cuid())
  orderId     String
  type        String  // base, addon, premium
  name        String
  description String?
  quantity    Int     @default(1)
  unitPrice   Float
  totalPrice  Float
  metadata    Json?   // Store additional data like addOnId, premiumType, etc.

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Booking {
  id          String        @id @default(cuid())
  orderId     String        @unique
  orderNumber String        @unique
  userId      String
  celebrityId String

  // Booking details
  message             String        @db.Text
  recipientName       String
  occasion            String?
  instructions        String?       @db.Text
  specialInstructions String?       @db.Text

  // Status and pricing
  status      BookingStatus @default(PENDING)
  price       Float
  totalAmount Float

  // Scheduling
  scheduledDate DateTime?
  deadline      DateTime?

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  order     Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  celebrity Celebrity @relation(fields: [celebrityId], references: [id], onDelete: Cascade)
  reviews   Review[]
}

model Review {
  id          String   @id @default(cuid())
  userId      String
  celebrityId String
  bookingId   String?
  rating      Int
  comment     String?
  verified    Boolean  @default(false)
  occasion    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  celebrity Celebrity  @relation(fields: [celebrityId], references: [id], onDelete: Cascade)
  booking   Booking?   @relation(fields: [bookingId], references: [id], onDelete: SetNull)
}

// New Tip Model
model Tip {
  id              String    @id @default(cuid())
  orderId         String
  userId          String    // Fan giving the tip
  celebrityId     String    // Celebrity receiving the tip
  amount          Float
  currency        String    @default("nzd")
  message         String?   @db.Text

  // Payment tracking
  paymentIntentId String?   @unique
  paymentStatus   PaymentStatus @default(PENDING)
  paidAt          DateTime?

  // Transfer tracking (100% goes to celebrity)
  transferId      String?   // Stripe transfer ID
  transferStatus  TransferStatus @default(PENDING)
  transferredAt   DateTime?

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  order     Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  celebrity Celebrity @relation(fields: [celebrityId], references: [id], onDelete: Cascade)
  transfers Transfer[]
}

// Transfer tracking model
model Transfer {
  id                String        @id @default(cuid())
  stripeTransferId  String        @unique
  celebrityId       String
  orderId           String?       // For booking transfers
  tipId             String?       // For tip transfers

  amount            Float
  currency          String        @default("nzd")
  type              TransferType  // BOOKING_PAYMENT, TIP
  status            TransferStatus @default(PENDING)

  // Metadata
  description       String?
  failureReason     String?

  // Timestamps
  initiatedAt       DateTime      @default(now())
  completedAt       DateTime?
  failedAt          DateTime?

  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  celebrity Celebrity @relation(fields: [celebrityId], references: [id], onDelete: Cascade)
  order     Order?    @relation(fields: [orderId], references: [id], onDelete: SetNull)
  tip       Tip?      @relation(fields: [tipId], references: [id], onDelete: SetNull)
}

// NEW Payout Model
model Payout {
  id                String        @id @default(cuid())
  celebrityId       String
  orderId           String
  amount            Float
  platformFee       Float
  currency          String        @default("nzd")
  stripeTransferId  String?       
  status            TransferStatus @default(PENDING)
  paidAt            DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  celebrity Celebrity @relation(fields: [celebrityId], references: [id], onDelete: Cascade)
  order     Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

// NEW: Service Management Models
model Service {
  id               String    @id @default(cuid())
  numericId        Int       @unique @default(autoincrement()) // For backward compatibility
  title            String
  shortDescription String    @db.Text
  fullDescription  String    @db.Text
  icon             String    // Icon name (e.g., "Zap", "MessageCircle")
  color            String    // Tailwind gradient classes
  
  // Pricing
  startingPrice    Float
  currency         String    @default("nzd")
  asapPrice        Float
  
  // Timing
  duration         String    // e.g., "Up to 60 seconds"
  deliveryTime     String    // e.g., "3-7 days"
  asapDeliveryTime String    // e.g., "24-48 hours"
  
  // JSON fields for complex data
  samples          Json      @default("[]") // Array of sample videos
  talents          Json      @default("[]") // Array of featured talents
  
  // Organization
  order            Int       @default(0)
  popular          Boolean   @default(false)
  isActive         Boolean   @default(true)
  
  // Audit fields
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  createdBy        String?   // User ID
  updatedBy        String?   // User ID
  
  // Relations
  features         ServiceFeature[]
  
  @@map("services")
}

model ServiceFeature {
  id        String   @id @default(cuid())
  serviceId String
  text      String
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  service   Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  
  @@map("service_features")
}

// NEW: Site Content Management Model
model SiteContent {
  id          String      @id @default(cuid())
  key         String      @unique  // e.g., "homepage.hero.title"
  value       String      @db.Text
  type        ContentType @default(TEXT)
  category    String      // homepage, about, services, faq, etc.
  description String?     // Human-readable description for admin
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  updatedBy   String?     // User ID who last updated this content

  @@map("site_content")
}

model VerificationToken {
  id         String    @id @default(cuid())
  email      String
  token      String    @unique
  type       TokenType
  expires    DateTime
  createdAt  DateTime  @default(now())
}

enum Role {
  FAN
  CELEBRITY
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  PENDING_APPROVAL
  COMPLETED
  CANCELLED
  REFUNDED
  REVISION_REQUESTED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  CANCELLED
  REFUNDED
}

enum BookingStatus {
  PENDING
  ACCEPTED
  CONFIRMED
  COMPLETED
  CANCELLED
  REFUNDED
}

enum ApprovalStatus {
  PENDING_APPROVAL
  APPROVED
  DECLINED
  REVISION_REQUESTED
}

enum TokenType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

enum ApplicationStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  REQUIRES_CHANGES
}

// Updated Stripe Connect Enums to match what we're using in code
enum StripeAccountStatus {
  PENDING
  RESTRICTED
  ACTIVE
  REJECTED
}

enum PayoutSchedule {
  DAILY
  WEEKLY
  MONTHLY
}

enum TransferStatus {
  PENDING
  IN_TRANSIT
  PAID
  FAILED
  CANCELLED
}

enum TransferType {
  BOOKING_PAYMENT
  TIP
}

// NEW: Content Type Enum
enum ContentType {
  TEXT        // Plain text
  HTML        // Rich text/HTML
  JSON        // Structured data
  IMAGE       // Image URL
  NUMBER      // Numeric values
  BOOLEAN     // True/false values
}

model SiteSettings {
  id              String   @id @default(cuid())
  siteName        String   @default("Kia Ora Kahi")
  siteDescription String   @default("Connect with celebrities for personalized video messages")
  contactEmail    String   @default("admin@kiaora.com")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model FinancialSettings {
  id             String   @id @default(cuid())
  platformFee    Float    @default(20)
  minimumPayout  Float    @default(50)
  payoutSchedule String   @default("weekly")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
